apiVersion: v1
kind: ConfigMap
metadata:
  name: accumulo-configmap
  labels:
    app: {{ template "accumulo.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  accumulo-env.sh: |
    ## Accumulo logs directory. Referenced by logger config.
    export ACCUMULO_LOG_DIR="${ACCUMULO_LOG_DIR:-${basedir}/logs}"
    ## Hadoop installation
    export HADOOP_HOME="${HADOOP_HOME:-/path/to/hadoop}"
    ## Hadoop configuration
    export HADOOP_CONF_DIR="${HADOOP_CONF_DIR:-${HADOOP_HOME}/etc/hadoop}"
    ## Zookeeper installation
    export ZOOKEEPER_HOME="${ZOOKEEPER_HOME:-/path/to/zookeeper}"

    ##########################
    # Build CLASSPATH variable
    ##########################

    # Verify that Hadoop & Zookeeper installation directories exist
    if [[ ! -d "$ZOOKEEPER_HOME" ]]; then
      echo "ZOOKEEPER_HOME=$ZOOKEEPER_HOME is not set to a valid directory in accumulo-env.sh"
      exit 1
    fi
    if [[ ! -d "$HADOOP_HOME" ]]; then
      echo "HADOOP_HOME=$HADOOP_HOME is not set to a valid directory in accumulo-env.sh"
      exit 1
    fi

    ## Build using existing CLASSPATH, conf/ directory, dependencies in lib/, and external Hadoop & Zookeeper dependencies
    if [[ -n "$CLASSPATH" ]]; then
      CLASSPATH="${CLASSPATH}:${conf}"
    else
      CLASSPATH="${conf}"
    fi

    ZK_JARS=$(find "$ZOOKEEPER_HOME/lib/" -maxdepth 1 -name '*.jar' -not -name '*slf4j*' -not -name '*log4j*' | paste -sd:)
    CLASSPATH="${CLASSPATH}:${lib}/*:${HADOOP_CONF_DIR}:${ZOOKEEPER_HOME}/lib/*:${ZK_JARS}:${HADOOP_HOME}/share/hadoop/client/*:${HADOOP_HOME}/share/hadoop/common/lib/*"
    CLASSPATH="/opt/extralibs/*:${CLASSPATH}"
    export CLASSPATH

    ##################################################################
    # Build JAVA_OPTS variable. Defaults below work but can be edited.
    ##################################################################

    ## JVM options set for all processes. Extra options can be passed in by setting ACCUMULO_JAVA_OPTS to an array of options.
    JAVA_OPTS=("${ACCUMULO_JAVA_OPTS[@]}"
      '-XX:OnOutOfMemoryError=kill -9 %p'
      '-XX:-OmitStackTraceInFastThrow'
      '-Djava.net.preferIPv4Stack=true'
      "-Daccumulo.native.lib.path=${lib}/native")

    ## Make sure Accumulo native libraries are built since they are enabled by default
    "${bin}"/accumulo-util build-native &> /dev/null

    ## JVM options set for individual applications
    case "$cmd" in
      manager|master)  JAVA_OPTS=("${JAVA_OPTS[@]}" '-Xmx512m' '-Xms512m') ;;
      monitor) JAVA_OPTS=("${JAVA_OPTS[@]}" '-Xmx256m' '-Xms256m') ;;
      gc)      JAVA_OPTS=("${JAVA_OPTS[@]}" '-Xmx256m' '-Xms256m') ;;
      tserver) JAVA_OPTS=("${JAVA_OPTS[@]}" '-Xmx768m' '-Xms768m') ;;
      *)       JAVA_OPTS=("${JAVA_OPTS[@]}" '-Xmx256m' '-Xms64m') ;;
    esac

    ## JVM options set for logging. Review log4j2.properties file to see how they are used.
    JAVA_OPTS=("${JAVA_OPTS[@]}"
      "-Daccumulo.log.dir=${ACCUMULO_LOG_DIR}"
      "-Daccumulo.application=${cmd}${ACCUMULO_SERVICE_INSTANCE}_$(hostname)"
      "-Daccumulo.metrics.service.instance=${ACCUMULO_SERVICE_INSTANCE}"
      "-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
    )

    case "$cmd" in
      monitor|gc|manager|master|tserver|tracer|compaction-coordinator|compactor)
        JAVA_OPTS=("${JAVA_OPTS[@]}" "-Dlog4j.configurationFile=log4j2-service.properties")
        ;;
      *)
        # let log4j use its default behavior (log4j2.properties, etc.)
        true
        ;;
    esac

    export JAVA_OPTS

    ############################
    # Variables set to a default
    ############################

    export MALLOC_ARENA_MAX=${MALLOC_ARENA_MAX:-1}
    ## Add Hadoop native libraries to shared library paths given operating system
    case "$(uname)" in
      Darwin) export DYLD_LIBRARY_PATH="${HADOOP_HOME}/lib/native:${DYLD_LIBRARY_PATH}" ;;
      *)      export LD_LIBRARY_PATH="${HADOOP_HOME}/lib/native:${LD_LIBRARY_PATH}" ;;
    esac

    ###############################################
    # Variables that are optional. Uncomment to set
    ###############################################

    ## Specifies command that will be placed before calls to Java in accumulo script
    # export ACCUMULO_JAVA_PREFIX=""

  accumulo.properties: |
    instance.volumes={{ .Values.accumulo.volumes }}
    
    # Configure FS implementations to be used by Accumulo
    #general.volume.chooser=org.apache.accumulo.core.spi.fs.PreferredVolumeChooser
    general.volume.chooser=org.apache.accumulo.server.fs.PreferredVolumeChooser
    general.custom.volume.preferred.default=accS3nf://{{ .Values.s3.bucket }}/accumulo
    general.custom.volume.preferred.logger=accS3mo://{{ .Values.s3.bucket }}/accumulo-wal
    
    ## Use S3LogCloser
    master.wal.closer.implementation=org.apache.accumulo.s3.manager.S3LogCloser

    ## Sets location of Zookeepers
    instance.zookeeper.host={{ .Values.zookeeper.host }}

    ## Change secret before initialization. All Accumulo servers must have same secret
    instance.secret=DEFAULT

    ## Set to false if 'accumulo-util build-native' fails
    tserver.memory.maps.native.enabled=true

    ## Trace user
    trace.user=root

    ## Trace password
    trace.password=secret

  accumulo-client.properties: |
    instance.name={{ .Values.accumulo.instance_name }}
    instance.zookeepers={{ .Values.zookeeper.host }}
    #instance.zookeepers.timeout=30s
    auth.type=password
    auth.principal={{ .Values.accumulo.username }}
    auth.token={{ .Values.accumulo.passwd }}

  core-site.xml: |
    <configuration>
        <property>
            <name>fs.defaultFS</name>
            <value>accS3nf://{{ .Values.s3.bucket }}</value>
        </property>
        <property>
            <name>fs.accS3nf.impl</name>
            <value>org.apache.accumulo.s3.file.AccumuloNoFlushS3FileSystem</value>
        </property>
        <property>
            <name>fs.accS3mo.impl</name>
            <value>org.apache.accumulo.s3.file.AccumuloMultiObjectS3FileSystem</value>
        </property>

        <property>
            <name>fs.s3a.access.key</name>
            <value>{{ .Values.s3.key }}</value>
        </property>
        <property>
            <name>fs.s3a.secret.key</name>
            <value>{{ .Values.s3.secret }}</value>
        </property>

        <!--<property>
          <name>fs.s3a.endpoint</name>
          <value>s3.us-east-2.amazonaws.com</value>
        </property>
        <property>
          <name>fs.s3a.connection.ssl.enabled</name>
          <value>false</value>
        </property>-->
    </configuration>

  bootstrap.sh: |
    #!/bin/bash

    # Directory to find config artifacts
    CONFIG_DIR="/tmp/accumulo-config"

    # Copy accumulo config files from volume mount
    for f in accumulo.properties accumulo-env.sh accumulo-client.properties; do
      if [[ -e ${CONFIG_DIR}/$f ]]; then
        cp ${CONFIG_DIR}/$f /opt/accumulo/conf/$f
      else
        echo "ERROR: Could not find $f in $CONFIG_DIR"
        exit 1
      fi
    done

    # Copy hadoop/etc config files from volume mount
    for f in core-site.xml; do
      if [[ -e ${CONFIG_DIR}/$f ]]; then
        cp ${CONFIG_DIR}/$f $HADOOP_HOME/etc/hadoop/$f
      else
        echo "ERROR: Could not find $f in $CONFIG_DIR"
        exit 1
      fi
    done

    # make gc config
    gc_end=$(({{ .Values.accumulo.gc.replicas }} - 1))
    for i in $(seq 0 $gc_end);
      do
        echo "{{ template "accumulo.fullname" . }}-manager-$i.{{ template "accumulo.name" . }}-gc-svc" >> /opt/accumulo/conf/gc;
    done
    # make manager config
    manager_end=$(({{ .Values.accumulo.manager.replicas }} - 1))
    for i in $(seq 0 $manager_end);
      do
        echo "{{ template "accumulo.fullname" . }}-manager-$i.{{ template "accumulo.name" . }}-manager-svc" >> /opt/accumulo/conf/managers;
    done
    # make monitor config
    monitor_end=$(({{ .Values.accumulo.monitor.replicas }} - 1))
    for i in $(seq 0 $monitor_end);
      do
        echo "{{ template "accumulo.fullname" . }}-manager-$i.{{ template "accumulo.name" . }}-monitor-svc" >> /opt/accumulo/conf/monitor;
    done
    # make tserver config
    tserver_end=$(({{ .Values.accumulo.tserver.replicas }} - 1))
    for i in $(seq 0 $tserver_end);
      do
        echo "{{ template "accumulo.fullname" . }}-ts-$i.{{ template "accumulo.fullname" . }}-ts-svc" >> /opt/accumulo/conf/tservers;
    done

    if [[ "${HOSTNAME}" =~ "accumulo-gc" ]]; then
      /opt/accumulo/bin/accumulo-service gc start
      tail -f /opt/accumulo/logs/*
    fi

    if [[ "${HOSTNAME}" =~ "accumulo-monitor" ]]; then
      /opt/accumulo/bin/accumulo-service monitor start
      tail -f /opt/accumulo/logs/*
    fi

    if [[ "${HOSTNAME}" =~ "accumulo-manager" ]]; then
      /opt/accumulo/bin/accumulo-service master start
      tail -f /opt/accumulo/logs/*
    fi

    if [[ "${HOSTNAME}" =~ "accumulo-ts" ]]; then
      /opt/accumulo/bin/accumulo-service tserver start
      tail -f /opt/accumulo/logs/*
    fi

    #tail -f /opt/accumulo/logs/*
